name: Build and deploy

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: python -m pip install --upgrade pip build twine
      - run: python -m build --sdist
      - run: python -m twine check dist/*
      - run: pip install --pre "$(ls dist/xraylib*.tar.gz)" numpy
      - run: python -c "import xraylib, xraylib_np"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}-${{ matrix.cibw_archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            cibw_archs: "auto64"
          #- os: windows-2019
          #  cibw_archs: "auto64"
          - os: macos-12
            cibw_archs: "x86_64"
          #- os: macos-14
          #  cibw_archs: "arm64"

    steps:
      - uses: actions/checkout@v4
      - uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
          # Do not build for pypy and muslinux
          CIBW_SKIP: pp* *-musllinux_*
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: python -c "import xraylib, xraylib_np"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  pypi-publish:
    needs: [build_sdist, build_wheels]
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
